// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  INTERVIEWER
  INTERVIEWEE
}

enum ExperienceIn {
  MONTHS
  YEARS
}

enum InterviewType {
  TECHNICAL
  BEHAVIORAL
  TECHNICAL_AND_BEHAVIORAL
  SYSTEM_DESIGN
  HR
  PROBLEM_SOLVING
}

enum InterviewDifficulty {
  EASY
  MEDIUM
  HARD
}

enum Status {
  PENDING
  COMPLETED
  CANCELLED
}

enum InterviewStatus {
  PENDING
  CREATED
  EXPIRED
}

enum Group {
  MANUAL
  AI_BASED
}

enum AssessmentType {
  MCQ_BASED
  VOICE_BASED
}

enum InterviewCategory {
  JOB
  MOCK
}

enum CreatedByRole {
  INTERVIEWER
  INTERVIEWEE
}

model User {
  id                          String        @id @default(uuid())
  firstName                   String?
  lastName                    String?
  email                       String        @unique
  password                    String?
  role                        Role?         @default(INTERVIEWEE)
  companyName                 String?
  position                    String?
  mobile                      String?
  experience                  Int           @default(0)
  experienceIn                ExperienceIn? @default(MONTHS)
  bio                         String?
  linkedIn                    String?
  gitHub                      String?
  location                    String?
  resume                      String?
  coins                       Int           @default(0)
  verified                    Boolean       @default(false)
  verifiedAt                  DateTime?
  lastLogin                   DateTime?
  verificationToken           String?
  verificationTokenExpiresAt  DateTime?
  resetPasswordToken          String?
  resetPasswordTokenExpiresAt DateTime?

  createdInterviews      Interview[]
  participatedInterviews InterviewParticipant[]

  feedbacks Feedback[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@index([email])
  @@map("users")
}

model Interview {
  id            String        @id @default(uuid())
  createdById   String
  createdBy     User          @relation(fields: [createdById], references: [id], onDelete: Cascade)
  createdByRole CreatedByRole @default(INTERVIEWER)

  type           InterviewType       @default(TECHNICAL)
  duration       Int                 @default(0)
  difficulty     InterviewDifficulty @default(EASY)
  experience     Int                 @default(0)
  experienceIn   ExperienceIn        @default(MONTHS)
  role           String
  description    String
  keywords       String
  topic          String?
  companyName    String?
  companyLogo    String?
  group          Group               @default(MANUAL)
  assessmentType AssessmentType      @default(VOICE_BASED)
  noOfQuestions  Int                 @default(0)
  status         InterviewStatus     @default(PENDING)
  validateTill   DateTime?

  questions    Question[]
  participants InterviewParticipant[]
  feedbacks    Feedback[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([createdById])
  @@map("interviews")
}

model InterviewParticipant {
  id          String    @id @default(uuid())
  interviewId String
  interview   Interview @relation(fields: [interviewId], references: [id], onDelete: Cascade)

  intervieweeId String
  interviewee   User   @relation(fields: [intervieweeId], references: [id], onDelete: Cascade)

  status      Status    @default(PENDING)
  startedAt   DateTime?
  completedAt DateTime?
  timeTaken   String? // e.g., "1h 30m"

  feedbacks Feedback[]

  @@unique([interviewId, intervieweeId])
  @@index([interviewId, intervieweeId])
  @@map("interview_participants")
}

model Question {
  id          String    @id @default(uuid())
  interviewId String
  interview   Interview @relation(fields: [interviewId], references: [id], onDelete: Cascade)

  question           String
  codeEditorRequired Boolean @default(false)
  questionType       String // e.g., "MCQ", "Coding", "Behavioral"
  options            String? // JSON string for MCQ options
  answer             String? // Correct answer for MCQ or expected output for coding
  explanation        String? // Explanation for the answer

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("questions")
}

model Feedback {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  interviewId String
  interview   Interview @relation(fields: [interviewId], references: [id], onDelete: Cascade)

  interviewParticipantId String?
  InterviewParticipant   InterviewParticipant? @relation(fields: [interviewParticipantId], references: [id])

  totalRating       Float
  summary           String
  strengths         String
  weaknesses        String
  improvements      String
  assessment        String
  recommendedForJob Boolean
  rating            RatingItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([interviewId])
  @@map("feedbacks")
}

model RatingItem {
  id      String @id @default(cuid())
  name    String // e.g., "technical", "communication"
  score   Float
  comment String

  feedback   Feedback @relation(fields: [feedbackId], references: [id], onDelete: Cascade)
  feedbackId String

  @@map("rating_items")
}
